{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/home/rakeeb/Code/Web/DropShare/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport Layout from '../components/myLayout';\nimport fetch from 'isomorphic-unfetch'; // Dynamic routing with router post and title queries\n\n/*\nconst PostLink = props => (\n\t<li>\n\t\t<Link href={`/post?title=${props.title}`}>\n\t\t\t<a>{props.title}</a>\n\t\t</Link>\n\t</li>\n);\n*/\n// Dynamic routing with router id queries\n\n/*\nconst PostLink = props => (\n\t<li>\n\t\t<Link href=\"/p/[id]\" as={`/p/${props.id}`}>\n\t\t\t<a>{props.id}</a>\n\t\t</Link>\n\t</li>\n);\n\nexport default function Blog() {\n\treturn (\n\t\t<Layout>\n\t        <h1>My Blog</h1>\n\t        <ul>\n            \t<PostLink id=\"Hello Next.js\" />\n\t            <PostLink id=\"Learn Next.js is awesome\" />\n\t            <PostLink id=\"Deploy apps with Zeit\" />\n\t        </ul>\n\t    </Layout>\n\t);  \n};\n*/\n\nvar Index = function Index(props) {\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Batman TV Shows\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, props.shows.map(function (show) {\n    return __jsx(\"li\", {\n      key: show.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: \"/p/[id]\",\n      as: \"/p/\".concat(show.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, show.name)));\n  })));\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://api.tvmaze.com/search/shows?q=batman'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/home/rakeeb/Code/Web/DropShare/pages/index.js"],"names":["Link","Layout","fetch","Index","props","shows","map","show","id","name","getInitialProps","res","json","data"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CAEA;;AACA;;;;;;;;;AAUA;;AACA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK;AAAA,SAClB,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEA,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAgB,UAAAC,IAAI;AAAA,WACpB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,EAAE,eAAQD,IAAI,CAACC,EAAb,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,IAAI,CAACE,IAAT,CADD,CADD,CADoB;AAAA,GAApB,CADF,CAFD,CADkB;AAAA,CAAnB;;AAeAN,KAAK,CAACO,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACLR,KAAK,CAAC,8CAAD,CADA;;AAAA;AACjBS,UAAAA,GADiB;AAAA;AAAA,2CAEJA,GAAG,CAACC,IAAJ,EAFI;;AAAA;AAEjBC,UAAAA,IAFiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAIA,eAAeV,KAAf","sourcesContent":["import Link from 'next/link';\nimport Layout from '../components/myLayout';\nimport fetch from 'isomorphic-unfetch';\n\n// Dynamic routing with router post and title queries\n/*\nconst PostLink = props => (\n\t<li>\n\t\t<Link href={`/post?title=${props.title}`}>\n\t\t\t<a>{props.title}</a>\n\t\t</Link>\n\t</li>\n);\n*/\n\n// Dynamic routing with router id queries\n/*\nconst PostLink = props => (\n\t<li>\n\t\t<Link href=\"/p/[id]\" as={`/p/${props.id}`}>\n\t\t\t<a>{props.id}</a>\n\t\t</Link>\n\t</li>\n);\n\nexport default function Blog() {\n\treturn (\n\t\t<Layout>\n\t        <h1>My Blog</h1>\n\t        <ul>\n            \t<PostLink id=\"Hello Next.js\" />\n\t            <PostLink id=\"Learn Next.js is awesome\" />\n\t            <PostLink id=\"Deploy apps with Zeit\" />\n\t        </ul>\n\t    </Layout>\n\t);  \n};\n*/\n\nconst Index = props => (\n\t<Layout>\n\t\t<h1>Batman TV Shows</h1>\n\t\t<ul>\n\t\t\t{props.shows.map(show => (\n\t\t\t\t<li key={show.id}>\n\t\t\t\t\t<Link href=\"/p/[id]\" as={`/p/${show.id}`}>\n\t\t\t\t\t\t<a>{show.name}</a>\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\t</Layout>\n);\n\nIndex.getInitialProps = async function() {\n\tconst res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n\tconst data = await res.json();\n};\nexport default Index;"]},"metadata":{},"sourceType":"module"}